{
  "metadata" : {
    "name" : "Visualization",
    "user_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : [ "org.apache.kafka %% kafka % 0.8.2.1", "org.apache.kafka % kafka-clients % 0.11.0.0", "org.apache.spark %% spark-core % 2.1.1", "org.apache.spark %% spark-streaming % 2.1.1", "org.apache.spark %% spark-streaming-kafka-0-8 % 2.1.1", "com.typesafe.play %% play-json % 2.4.0" ],
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "2E7CD7525BC2411DADB4CB2177AFB396"
    },
    "cell_type" : "markdown",
    "source" : "# Scala Project: MoviesPopularity"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "002FD47C8387498C8898D38143240A59"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.SparkConf\nimport org.apache.spark.streaming.kafka.KafkaUtils\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\nimport org.apache.spark.streaming.dstream.InputDStream\nimport kafka.serializer.StringDecoder\nimport play.api.libs.json.Json\nimport notebook.front.widgets.charts",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.SparkConf\nimport org.apache.spark.streaming.kafka.KafkaUtils\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\nimport org.apache.spark.streaming.dstream.InputDStream\nimport kafka.serializer.StringDecoder\nimport play.api.libs.json.Json\nimport notebook.front.widgets.charts\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 1,
      "time" : "Took: 3 seconds 901 milliseconds, at 2017-7-10 13:53"
    } ]
  }, {
    "metadata" : {
      "id" : "D324BFCEE31E4F89B782C8EE73C1ACB4"
    },
    "cell_type" : "markdown",
    "source" : "## Methods"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "2161D1E33D074F6C88DD32A6EBBED5E5"
    },
    "cell_type" : "code",
    "source" : "\n  def setUpStream(brokers: String, topic: String, ssc: StreamingContext): InputDStream[(String, String)] = {\n\n    val kafkaParams = Map[String, String](\"bootstrap.servers\" -> brokers)\n\n    KafkaUtils.createDirectStream[String, String, StringDecoder, StringDecoder](\n        ssc,\n        kafkaParams,\n        Set(topic)\n    )\n  }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "setUpStream: (brokers: String, topic: String, ssc: org.apache.spark.streaming.StreamingContext)org.apache.spark.streaming.dstream.InputDStream[(String, String)]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 2,
      "time" : "Took: 10 seconds 577 milliseconds, at 2017-7-10 13:53"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab916006759-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Minimum\",\n  \"rendererName\": \"Bar Chart\"\n}"
      },
      "id" : "3E67AA5A8C664319883A11CA7E2C62B2"
    },
    "cell_type" : "code",
    "source" : "val brokers = \"localhost:9092\"\n\nval m = 200\nval size_x = 200\nval size_y = 200\nval ssc = StreamingContext.getActiveOrCreate(() => new StreamingContext(sc, Seconds(2)))\n\n/* Setting up streams */\nval genreStream = setUpStream(brokers, \"genre\", ssc)\nval directorStream = setUpStream(brokers, \"director\", ssc)\nval actorStream = setUpStream(brokers, \"actors\", ssc)\n\n/* Creating charts */\nval genreBs  = BarChart(List((\"\", 0)), maxPoints =m, sizes=(size_x, size_y))\nval directorBs = BarChart(List((\"\", 0)), maxPoints =m, sizes=(size_x, size_y))\nval actorBs = BarChart(List((\"\", 0)), maxPoints =m, sizes=(size_x, size_y))\n\n/* Updating values */\ngenreStream.map(_._2)\n            .map(Json.parse(_).as[Map[String, Int]])\n            .flatMap(_.toList)\n            .foreachRDD { rdd => genreBs.applyOn(rdd.collect().toList) }\n\ndirectorStream.map(_._2)\n            .map(Json.parse(_).as[Map[String, Int]])\n            .flatMap(_.toList)\n            .foreachRDD { rdd => directorBs.applyOn(rdd.collect().toList) }\n\nactorStream.map(_._2)\n            .map(Json.parse(_).as[Map[String, Int]])\n            .flatMap(_.toList)\n            .foreachRDD { rdd => actorBs.applyOn(rdd.collect().toList) }\n                          \n\n\n/* Design */\n/*val all = List(genreBs, directorBs, actorBs)\nval maxPointsBox = new InputBox[Int](m, \"Max Points (for ALL)\")\n\nmaxPointsBox.currentData --> Connection.fromObserver { max:Int =>\n  all foreach { w =>\n    w.newMax(max)\n  }\n}*/\n\nssc.start()\n\ncontainerFluid(\n  List(\n      List((html(<hr/>), 12)),\n      List(\n        (genreBs, 6),\n        (actorBs, 6)\n      ),\n      List(\n        (directorBs, 6)\n      )\n))\n\n\n\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "brokers: String = localhost:9092\nm: Int = 200\nsize_x: Int = 200\nsize_y: Int = 200\nssc: org.apache.spark.streaming.StreamingContext = org.apache.spark.streaming.StreamingContext@5814ce8a\ngenreStream: org.apache.spark.streaming.dstream.InputDStream[(String, String)] = org.apache.spark.streaming.kafka.DirectKafkaInputDStream@d25e70a\ndirectorStream: org.apache.spark.streaming.dstream.InputDStream[(String, String)] = org.apache.spark.streaming.kafka.DirectKafkaInputDStream@594cfadb\nactorStream: org.apache.spark.streaming.dstream.InputDStream[(String, String)] = org.apache.spark.streaming.kafka.DirectKafkaInputDStream@35987ad2\ngenreBs: notebook.front.widgets.charts.BarChart[List[(String, Int)]] = <BarChart widget>\ndirectorBs: notebook.front.widgets.charts.BarChart[List[(String, Int)]] = <BarC..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div class=\"container-fluid\"><div class=\"row\"><div class=\"col-md-12\"><hr/></div></div><div class=\"row\"><div class=\"col-md-6\"><div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonc0c70c703c7d901c2a8c2784659ce94f&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;&quot;,&quot;_2&quot;:0}],&quot;genId&quot;:&quot;1579487613&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/barChart'], \n      function(playground, _magicbarChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicbarChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":200,\"height\":200}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon29532fb6130c9fab17344bf7d83c1108&quot;,&quot;initialValue&quot;:&quot;1&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon5c7a0790c71d8f63379b94f44c5e4f93&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div></div><div class=\"col-md-6\"><div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon819c86850f26e5097cff86bc77fe8c1e&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;&quot;,&quot;_2&quot;:0}],&quot;genId&quot;:&quot;255539190&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/barChart'], \n      function(playground, _magicbarChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicbarChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":200,\"height\":200}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonb1aef6ed3c75ea539d221c08e29676a7&quot;,&quot;initialValue&quot;:&quot;1&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon55f5a8f78bf105741efe7c1596447fd3&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div></div></div><div class=\"row\"><div class=\"col-md-6\"><div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon01f874f4c06f2980e2192a31a7e1c763&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;&quot;,&quot;_2&quot;:0}],&quot;genId&quot;:&quot;632956498&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/barChart'], \n      function(playground, _magicbarChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicbarChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":200,\"height\":200}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon238d41f356445d8521a6fed777856652&quot;,&quot;initialValue&quot;:&quot;1&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonecf2702e8f4a691e2e12358eb2d315f5&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div></div></div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 4,
      "time" : "Took: 10 seconds 591 milliseconds, at 2017-7-10 13:54"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "AF97665204A046DF80E24966366DD71E"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 5,
      "time" : "Took: 3 seconds 132 milliseconds, at 2017-7-10 13:29"
    } ]
  } ],
  "nbformat" : 4
}