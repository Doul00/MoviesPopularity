{
  "metadata" : {
    "name" : "Visualization",
    "user_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : [ "org.apache.kafka %% kafka % 0.8.2.1", "org.apache.kafka % kafka-clients % 0.11.0.0", "org.apache.spark %% spark-core % 2.1.1", "org.apache.spark %% spark-streaming % 2.1.1", "org.apache.spark %% spark-streaming-kafka-0-8 % 2.1.1", "com.typesafe.play %% play-json % 2.4.0" ],
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "2E7CD7525BC2411DADB4CB2177AFB396"
    },
    "cell_type" : "markdown",
    "source" : "# Scala Project: MoviesPopularity"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "002FD47C8387498C8898D38143240A59"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.SparkConf\nimport org.apache.spark.streaming.kafka.KafkaUtils\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\nimport org.apache.spark.streaming.dstream.InputDStream\nimport kafka.serializer.StringDecoder\nimport play.api.libs.json.Json\nimport notebook.front.widgets.charts",
    "outputs" : [ {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 2,
      "time" : "Took: 1 second 731 milliseconds, at 2017-7-9 22:45"
    }, {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.SparkConf\nimport org.apache.spark.streaming.kafka.KafkaUtils\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\nimport org.apache.spark.streaming.dstream.InputDStream\nimport kafka.serializer.StringDecoder\nimport play.api.libs.json.Json\nimport notebook.front.widgets.charts\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 3,
      "time" : "Took: 1 second 512 milliseconds, at 2017-7-9 22:45"
    } ]
  }, {
    "metadata" : {
      "id" : "D324BFCEE31E4F89B782C8EE73C1ACB4"
    },
    "cell_type" : "markdown",
    "source" : "## Case classes"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "C21023AFFE0742FE86B341B55DD91620"
    },
    "cell_type" : "code",
    "source" : "\ncase class Review (\n                  title: String,\n                  score: Float,\n                  content: String,\n                  sentiment: Int\n                  )\n\nobject Review {\n  implicit val reviewFormat = play.api.libs.json.Json.format[Review]\n}\n\ncase class Movie (\n                 budget: Long,\n                 gross: Long,\n                 title: String,\n                 genres: Seq[String],\n                 score: Float,\n                 year: Int,\n                 direction: Option[String],\n                 actors: Seq[String],\n                 reviews: Seq[Review],\n                 sentimentScore: Option[Float]\n                 )\n\nobject Movie{\n  implicit val movieFormat = play.api.libs.json.Json.format[Movie]\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class Review\ndefined object Review\ndefined class Movie\ndefined object Movie\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 4,
      "time" : "Took: 3 seconds 667 milliseconds, at 2017-7-9 22:47"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "2161D1E33D074F6C88DD32A6EBBED5E5"
    },
    "cell_type" : "code",
    "source" : "\n  def setUpStream(brokers: String, topic: String, ssc: StreamingContext): InputDStream[(String, String)] = {\n\n    val kafkaParams = Map[String, String](\"bootstrap.servers\" -> brokers)\n\n    KafkaUtils.createDirectStream[String, String, StringDecoder, StringDecoder](\n        ssc,\n        kafkaParams,\n        Set(topic)\n    )\n  }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "setUpStream: (brokers: String, topic: String, ssc: org.apache.spark.streaming.StreamingContext)org.apache.spark.streaming.dstream.InputDStream[(String, String)]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 6,
      "time" : "Took: 2 seconds 297 milliseconds, at 2017-7-9 22:47"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3E67AA5A8C664319883A11CA7E2C62B2"
    },
    "cell_type" : "code",
    "source" : "val brokers = \"localhost:9092\"\nval topics = \"genre\"\n\nval ssc = StreamingContext.getActiveOrCreate(() => new StreamingContext(sc, Seconds(2)))\n\nval topicsSet = topics.split(\",\").toSet\nval kafkaParams = Map[String, String](\"bootstrap.servers\" -> brokers)\nval genreStream = setUpStream(brokers, topics, ssc)\n\nval bs  = BarChart(List((\"\", 0)), maxPoints =200, sizes=(200, 200))\nval genreValues = genreStream.map(_._2)\n                            .map(Json.parse(_).as[Map[String, Int]])\n                            .flatMap(_.toList)\n                            .foreachRDD { rdd => bs.applyOn(rdd.collect().toList) }\n                          \n\nssc.start()\nbs",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "brokers: String = localhost:9092\ntopics: String = genre\nssc: org.apache.spark.streaming.StreamingContext = org.apache.spark.streaming.StreamingContext@6ae3b966\ntopicsSet: scala.collection.immutable.Set[String] = Set(genre)\nkafkaParams: scala.collection.immutable.Map[String,String] = Map(bootstrap.servers -> localhost:9092)\ngenreStream: org.apache.spark.streaming.dstream.InputDStream[(String, String)] = org.apache.spark.streaming.kafka.DirectKafkaInputDStream@27c65fa8\nbs: notebook.front.widgets.charts.BarChart[List[(String, Int)]] = <BarChart widget>\ngenreValues: Unit = ()\nres32: notebook.front.widgets.charts.BarChart[List[(String, Int)]] = <BarChart widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon9f3e4c185d40082d9d7e869aaaf2288c&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;&quot;,&quot;_2&quot;:0}],&quot;genId&quot;:&quot;1901182192&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/barChart'], \n      function(playground, _magicbarChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicbarChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":200,\"height\":200}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonf0491369f8dc161b28fdf940655aa863&quot;,&quot;initialValue&quot;:&quot;1&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon35461264e48be3b24603a78c2e58a600&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 19,
      "time" : "Took: 5 seconds 191 milliseconds, at 2017-7-9 23:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "BEDB5F3F83E64A84B53AC4D978A06239"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}